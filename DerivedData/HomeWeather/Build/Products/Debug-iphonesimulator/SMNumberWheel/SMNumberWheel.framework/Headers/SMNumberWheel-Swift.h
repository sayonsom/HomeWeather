// Generated by Apple Swift version 3.0.2 (swiftlang-800.0.63 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import UIKit;
@import CoreGraphics;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class UIColor;
@class NSCoder;
@class UITouch;
@class UIEvent;

SWIFT_CLASS("_TtC13SMNumberWheel13SMNumberWheel")
@interface SMNumberWheel : UIControl
/**
  Use different identifiers to identify different controls when using delegation.
*/
@property (nonatomic, copy) NSString * _Nonnull identifier;
/**
  Current value as String respecting output type.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull valueAsString;
/**
  Current value as Double
*/
@property (nonatomic, readonly) double valueAsDouble;
/**
  Current value as Int64
*/
@property (nonatomic, readonly) int64_t valueAsInt64;
/**
  Plays a tik sound when value changes on integers
*/
@property (nonatomic) BOOL sounds;
/**
  Plays a haptic feedback when value changes on integers. Available only on iOS 10 and above for iPhone 7, 7+ and later.
*/
@property (nonatomic) BOOL hapticFeedback;
/**
  By setting it to true all rotation animations and decelerations will be disabled.
*/
@property (nonatomic) BOOL lockRotation;
/**
  Determine if the wheel should continue rotating and decelerating after user spins the wheel.
*/
@property (nonatomic) BOOL decelerate;
/**
  Setting this property to false will eliminate bouncing back of the wheel, when it reaches a limit, and it has to stay at that limit.
*/
@property (nonatomic) BOOL bounceBack;
/**
  By setting it to true, the control will minimize itself after 1.5 seconds being idle.
*/
@property (nonatomic) BOOL autoMinimize;
/**
  Set the width of rotating ring. Set it to 0.0 to let the system pick the best width automatically.
*/
@property (nonatomic) CGFloat ringWidth;
/**
  Set the outer Stroke Width for ring. Default: 1.0
*/
@property (nonatomic) CGFloat ringStroke;
/**
  Set the outer Stroke Color for ring when control is in highlighted state. This value is optional.
*/
@property (nonatomic, strong) UIColor * _Nullable strokeColorStateHighlighted;
/**
  Set the outer Stroke Color for ring when user is rotating his/her finger on wheel. (Clockwise). This value is optional.
*/
@property (nonatomic, strong) UIColor * _Nullable strokeColorStateClockwiseRotation;
/**
  Set the outer Stroke Color for ring when user is rotating his/her finger on wheel. (Counter Clockwise). This value is optional.
*/
@property (nonatomic, strong) UIColor * _Nullable strokeColorStateCounterClockwiseRotation;
/**
  Set fill color of the ring. Default: Tint color. This value is optional.
*/
@property (nonatomic, strong) UIColor * _Nullable ringColor;
/**
  Set ring’s outer Stroke Color. Default: Tint color. This value is optional.
*/
@property (nonatomic, strong) UIColor * _Nullable strokeColor;
/**
  Set fill color of the ring for highlighted state. This value is optional.
*/
@property (nonatomic, strong) UIColor * _Nullable ringColorHighlighted;
/**
  Set fill color of the ring when user is rotating his/her finger on wheel. (Clockwise). This value is optional.
*/
@property (nonatomic, strong) UIColor * _Nullable ringColorClockwiseRotation;
/**
  Set fill color of the ring when user is rotating his/her finger on wheel. (Counter Clockwise). This value is optional.
*/
@property (nonatomic, strong) UIColor * _Nullable ringColorCounterclockwiseRotation;
/**
  Enable/Disable the central button. Default: enabled
*/
@property (nonatomic) BOOL buttonEnabled;
/**
  Set fill color of central button for normal state. Default: background color of view. This value is optional
*/
@property (nonatomic, strong) UIColor * _Nullable buttonBackgroundColorStateNormal;
/**
  Set fill color of central button for highlighted state. This value is optional.
*/
@property (nonatomic, strong) UIColor * _Nullable buttonBackgroundColorStateHighlighted;
/**
  Sets the string to be shown at the center of control. This string will be shown instead of current value. Set it to nil to show the current value. System will reduce the size of text automatically to fit in the central area.
*/
@property (nonatomic, copy) NSString * _Nullable centralLabelText;
/**
  Set visibility of central label. Default: true
*/
@property (nonatomic) BOOL labelVisible;
/**
  Font size for central Button. Default: 32. If the text doesn’t fit in center area, system will auto-reduce the font size.
*/
@property (nonatomic) CGFloat fontSize;
/**
  Set color for central label in normal state. Default: Tint color
*/
@property (nonatomic, strong) UIColor * _Nullable labelColorStateNormal;
/**
  Set color for central label in highlighted state. Default: background color of view. This value is optional.
*/
@property (nonatomic, strong) UIColor * _Nullable labelColorStateHighlighted;
/**
  Set the visibility of steppers on top of the control. Default value: true
*/
@property (nonatomic) BOOL stepper;
/**
  Amount of change in value when user presses stepper buttons.
*/
@property (nonatomic) double stepValue;
/**
  Sets the color of steppers. Default: white color. This value is optional.
*/
@property (nonatomic, strong) UIColor * _Nullable stepperColor;
/**
  Sets the background color for Steppers area. Default: tint color. This value is optional.
*/
@property (nonatomic, strong) UIColor * _Nullable stepperBackgroundColor;
/**
  Sets the background color for Steppers area when steppers are highlighted. Default: tint color. This value is optional.
*/
@property (nonatomic, strong) UIColor * _Nullable stepperBackgroundColorStateHighlighted;
/**
  Sets the stroke color of stepper area. This value is optional.
*/
@property (nonatomic, strong) UIColor * _Nullable stepperBorderColor;
/**
  Set the outer Stroke Width for indicators. Default: 1.0
*/
@property (nonatomic) CGFloat indicatorStroke;
/**
  Number of major indicators shown on the ring. Default: 4
*/
@property (nonatomic) NSUInteger majorIndicators;
/**
  Type of major Indicators. Between 0 and 5. Default: 1 = circular. You can also set majorIndicatorType property directly in code.
*/
@property (nonatomic) NSInteger majorIndType;
/**
  Set size of major indicators. Set it to ZERO for automatic calculation. Default: 0.0
*/
@property (nonatomic) CGFloat majorIndSize;
/**
  Number of minor indicators shown on the ring. Default: 12
*/
@property (nonatomic) NSUInteger minorIndicators;
/**
  Type of minor Indicators. Between 0 and 5. Default: 1 = circular. You can also set majorIndicatorType property directly in code.
*/
@property (nonatomic) NSInteger minorIndType;
/**
  Set size of minor indicators. Set it to ZERO for automatic calculation. Default: 0.0
*/
@property (nonatomic) CGFloat minorIndSize;
/**
  Set indicator color. Default: White color. This value is optional.
*/
@property (nonatomic, strong) UIColor * _Nullable indicatorColor;
/**
  By setting it to false only the border of indicators will be drawn.
*/
@property (nonatomic) BOOL indicatorFill;
/**
  Set indicator color when control is in highlighted state. This value is optional.
*/
@property (nonatomic, strong) UIColor * _Nullable indicatorColorHighlighted;
/**
  Set indicator color when user is rotating his/her finger on wheel. (Clockwise). This value is optional.
*/
@property (nonatomic, strong) UIColor * _Nullable indicatorColorClockwiseRotation;
/**
  set indicator color when user is rotating his/her finger on wheel. (Counter Clockwise). This value is optional.
*/
@property (nonatomic, strong) UIColor * _Nullable indicatorColorCounterClockwiseRotation;
@property (nonatomic) CGRect bounds;
@property (nonatomic) CGRect frame;
/**
  Enable/Disable control. Changes to the control are animated. For non-animated settings, use userInteractionEnabled property instead.
*/
@property (nonatomic, setter=setEnabled:) BOOL isEnabled;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)tintColorDidChange;
- (BOOL)beginTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event;
- (BOOL)continueTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event;
- (void)endTrackingWithTouch:(UITouch * _Nullable)touch withEvent:(UIEvent * _Nullable)event;
/**
  Rotates indicators with desired angle (Radians) in desired direction.
*/
- (void)rotateIndicatorsLayerWithAngle:(CGFloat)angle animated:(BOOL)animated;
/**
  Rotates indicators to their initial position.
*/
- (void)rotateIndicatorsToInitial;
/**
  Stops the rotation of wheel if it is in deceleration mode.
*/
- (void)stopRotation;
/**
  Forces wheel to minimize itself.
*/
- (void)minimizeWheel;
/**
  Forces wheel to restore to full size. If Auto Minimize is set to true, the wheel will auto-minimize itself after 1.5 seconds being idle.
*/
- (void)maximizeWheel;
- (void)prepareForInterfaceBuilder;
/**
  Increase/Decrease the current value by stepperValue. Animations should be handeled manually using rotateIndicatorsLayer(#angle: CGFloat, animated: Bool) function. Returns false if new value is out of range.
*/
- (BOOL)shiftValueWithIncrement:(BOOL)increment;
/**
  Sets the current value to new Value. Animations should be handeled manually using rotateIndicatorsLayer(#angle: CGFloat, animated: Bool) function. Returns false if new value is out of range.
*/
- (BOOL)setValueWithNewValue:(double)newValue;
/**
  Sets the current value to default Value (if the default value is set before). Animations should be handeled manually using rotateIndicatorsLayer(#angle: CGFloat, animated: Bool) function.
*/
- (void)resetToDefaultValue;
@end

#pragma clang diagnostic pop
